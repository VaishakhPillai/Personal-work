import os
import requests
from logger import get_logger

logger = get_logger()

def analyze_with_virustotal(filepath, username):
    api_key = "0593f09292c0befad77ff5667a1725a0815c40535f74a6b6c49ad5f49a7a8034"  
    url = "https://www.virustotal.com/api/v3/files"
    headers = {
        "x-apikey": api_key
    }

    try:
        with open(filepath, "rb") as f:
            files = {"file": (os.path.basename(filepath), f)}
            response = requests.post(url, headers=headers, files=files)

        if response.status_code == 200:
            file_id = response.json()["data"]["id"]
            logger.info(f"User: {username} | Action: Malware Analysis Upload | Status: Success | File: {os.path.basename(filepath)}")

            # Polling for analysis result
            report_url = f"https://www.virustotal.com/api/v3/analyses/{file_id}"
            analysis = requests.get(report_url, headers=headers)

            if analysis.status_code == 200:
                result = analysis.json()["data"]["attributes"]["stats"]
                malicious = result.get("malicious", 0)
                suspicious = result.get("suspicious", 0)
                harmless = result.get("harmless", 0)

                summary = f"Malicious: {malicious}, Suspicious: {suspicious}, Harmless: {harmless}"
                logger.info(f"User: {username} | Action: Malware Analysis Result | Status: Success | Result: {summary}")
                return summary
            else:
                logger.error(f"User: {username} | Action: Malware Analysis Result | Status: Failure | Reason: Could not fetch result")
                return "Analysis failed. Please try again later."

        else:
            logger.error(f"User: {username} | Action: Malware Analysis Upload | Status: Failure | Reason: {response.text}")
            return "File upload failed. Check your API key or rate limits."

    except Exception as e:
        logger.error(f"User: {username} | Action: Malware Analysis Error | Status: Error | Details: {str(e)}")
        return f"Error during malware analysis: {e}"

